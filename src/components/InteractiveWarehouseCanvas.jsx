import React, { useEffect, useRef, useState, memo } from "react";
import { Stage, Layer, Rect, Text, Image } from "react-konva";
import backgroundImage from "../assets/INDIVIDUAL.png";
import lockIcon from "../assets/lock.png";
import warehouseLayoutData from "../assets/warehouseLayout.json";

const InteractiveWarehouseCanvas = memo(({ storageBoxes, onBoxSelect, selectedStorage }) => {
  const [backgroundImg, setBackgroundImg] = useState(null);
  const [lockImg, setLockImg] = useState(null);
  const [hoveredId, setHoveredId] = useState(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  useEffect(() => {
    const img = new window.Image();
    img.src = backgroundImage;
    img.onload = () => {
      setBackgroundImg(img);
    };
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏ –∑–∞–º–∫–∞
  useEffect(() => {
    const img = new window.Image();
    img.src = lockIcon;
    img.onload = () => {
      setLockImg(img);
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ–∫—Å–∞ –ø–æ –∏–º–µ–Ω–∏
  const getBoxStatus = (boxName) => {
    const box = storageBoxes.find(storage => 
      storage.name === boxName && storage.storage_type === 'INDIVIDUAL'
    );
    return box ? box.status : 'OCCUPIED'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –∑–∞–Ω—è—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ–∫—Å–∞ –ø–æ –∏–º–µ–Ω–∏
  const getBoxData = (boxName) => {
    return storageBoxes.find(storage => 
      storage.name === boxName && storage.storage_type === 'INDIVIDUAL'
    );
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –±–æ–∫—Å—É
  const handleBoxClick = (boxName) => {
    const boxData = getBoxData(boxName);
    const status = getBoxStatus(boxName);
    
    if (status === 'VACANT' && boxData) {
      onBoxSelect(boxData);
      if (import.meta.env.DEV) {
        console.log('–í—ã–±—Ä–∞–Ω –±–æ–∫—Å:', boxData);
      }
    } else {
      if (import.meta.env.DEV) {
        console.log('–ë–æ–∫—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', boxName, status);
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  const handleMouseEnter = (boxName) => {
    const status = getBoxStatus(boxName);
    if (status === 'VACANT') {
      setHoveredId(boxName);
    }
  };

  const handleMouseLeave = () => {
    setHoveredId(null);
  };

  return (
    <div className="flex flex-col items-center">
      <Stage width={615} height={1195}>
        <Layer>
          {/* –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
          {backgroundImg && (
            <Image
              image={backgroundImg}
              x={0}
              y={0}
              width={613}
              height={1191}
              listening={false}
            />
          )}
          
          {warehouseLayoutData.map((box) => {
            const status = getBoxStatus(box.name);
            const isSelected = selectedStorage?.name === box.name;
            const isHovered = hoveredId === box.name;
            const boxData = getBoxData(box.name);
            
            return (
              <React.Fragment key={box.name}>
                <Rect
                  x={box.x}
                  y={box.y}
                  width={box.width}
                  height={box.height}
                  fill={
                    isSelected
                      ? "rgba(39, 54, 85, 0.7)" // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
                      : isHovered && status === 'VACANT'
                      ? "rgba(254, 243, 178, 0.9)" // –ë–æ–ª–µ–µ —è—Ä–∫–∏–π –∂—ë–ª—Ç—ã–π –ø—Ä–∏ hover
                      : status === 'VACANT'
                      ? "#fef3b2" // –ñ—ë–ª—Ç—ã–π –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö
                      : "rgba(200, 200, 200, 0.8)" // –°–µ—Ä—ã–π –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö
                  }
                  stroke={
                    isSelected
                      ? "#273655"
                      : status === 'VACANT'
                      ? "#f59e0b" // –û—Ä–∞–Ω–∂–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö
                      : "#6b7280" // –°–µ—Ä–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö
                  }
                  strokeWidth={isSelected ? 3 : 1}
                  cornerRadius={4}
                  onClick={() => handleBoxClick(box.name)}
                  onMouseEnter={() => handleMouseEnter(box.name)}
                  onMouseLeave={handleMouseLeave}
                  style={{
                    cursor: status === 'VACANT' ? 'pointer' : 'not-allowed'
                  }}
                />
                
                {/* –ò–∫–æ–Ω–∫–∞ –∑–∞–º–∫–∞ –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö –±–æ–∫—Å–æ–≤ */}
                {status === 'OCCUPIED' && lockImg && (
                  <Image
                    image={lockImg}
                    x={box.x + box.width / 2 - 12}
                    y={box.y + box.height / 2 - 12}
                    width={24}
                    height={24}
                    listening={false}
                  />
                )}
                
                {/* –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ–∫—Å–∞ */}
                <Text
                  text={box.name}
                  x={box.x + box.width / 2}
                  y={status === 'OCCUPIED' ? box.y + box.height / 2 + 20 : box.y + box.height / 2}
                  fontSize={12}
                  fontFamily="Montserrat, sans-serif"
                  fontStyle="bold"
                  fill={
                    isSelected
                      ? "#ffffff"
                      : status === 'VACANT'
                      ? "#92400e" // –¢–µ–º–Ω–æ-–∂–µ–ª—Ç—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö
                      : "#6b7280" // –°–µ—Ä—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö
                  }
                  align="center"
                  verticalAlign="middle"
                  offsetX={0}
                  offsetY={6}
                  listening={false}
                />
                
                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º –æ–±—ä–µ–º–µ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –±–æ–∫—Å–æ–≤ */}
                {status === 'VACANT' && boxData && (
                  <Text
                    text={`${boxData.available_volume} –º¬≥`}
                    x={box.x + box.width / 2}
                    y={box.y + box.height / 2 + 15}
                    fontSize={10}
                    fontFamily="Montserrat, sans-serif"
                    fill={isSelected ? "#ffffff" : "#92400e"}
                    align="center"
                    verticalAlign="middle"
                    offsetX={0}
                    offsetY={5}
                    listening={false}
                  />
                )}
              </React.Fragment>
            );
          })}
        </Layer>
      </Stage>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±–æ–∫—Å–µ */}
      {selectedStorage && (
        <div className="mt-6 bg-white border border-gray-200 rounded-lg p-4 max-w-md">
          <h4 className="text-lg font-bold text-[#273655] mb-2">
            –í—ã–±—Ä–∞–Ω–Ω—ã–π –±–æ–∫—Å: {selectedStorage.name}
          </h4>
          <div className="space-y-1 text-sm text-[#6B6B6B]">
            <p>–û–±—â–∏–π –æ–±—ä–µ–º: <span className="font-medium text-[#273655]">{selectedStorage.total_volume} –º¬≥</span></p>
            <p>–î–æ—Å—Ç—É–ø–Ω–æ: <span className="font-medium text-[#273655]">{selectedStorage.available_volume} –º¬≥</span></p>
            <p>–í—ã—Å–æ—Ç–∞: <span className="font-medium text-[#273655]">{selectedStorage.height} –º</span></p>
            <p className="text-[#273655] font-medium">{selectedStorage.description}</p>
          </div>
        </div>
      )}

      {/* –õ–µ–≥–µ–Ω–¥–∞ */}
      <div className="mt-4 bg-gray-50 border border-gray-200 rounded-lg p-4 max-w-md">
        <h5 className="font-bold text-[#273655] mb-3">–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:</h5>
        <div className="space-y-2 text-sm">
          <div className="flex items-center gap-3">
            <div className="w-6 h-6 bg-[#fef3b2] border border-[#f59e0b] rounded"></div>
            <span className="text-[#6B6B6B]">–°–≤–æ–±–æ–¥–Ω—ã–π –±–æ–∫—Å</span>
          </div>
          <div className="flex items-center gap-3">
            <div className="w-6 h-6 bg-gray-300 border border-gray-400 rounded flex items-center justify-center">
              üîí
            </div>
            <span className="text-[#6B6B6B]">–ó–∞–Ω—è—Ç—ã–π –±–æ–∫—Å</span>
          </div>
          <div className="flex items-center gap-3">
            <div className="w-6 h-6 bg-[#273655] border-2 border-[#273655] rounded"></div>
            <span className="text-[#6B6B6B]">–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–æ–∫—Å</span>
          </div>
        </div>
      </div>
    </div>
  );
});

InteractiveWarehouseCanvas.displayName = 'InteractiveWarehouseCanvas';

export default InteractiveWarehouseCanvas; 
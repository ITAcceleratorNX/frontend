import React, { useState, useEffect, useMemo, memo } from 'react';
import NotificationCard from './NotificationCard';

const NotificationHistory = memo(({ notifications = [], scale = 1 }) => {
  const [searchTerm, setSearchTerm] = useState('');
  
  // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ notifications –≤—Å–µ–≥–¥–∞ –º–∞—Å—Å–∏–≤
  const safeNotifications = useMemo(() => {
    if (Array.isArray(notifications)) {
      return notifications;
    }
    // –ï—Å–ª–∏ notifications —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º notifications
    if (notifications && Array.isArray(notifications.notifications)) {
      return notifications.notifications;
    }
    // –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return [];
  }, [notifications]);
  
  // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –≤ development)
  useEffect(() => {
    if (import.meta.env.DEV) {
      console.log('NotificationHistory - –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', notifications);
      console.log('NotificationHistory - –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', safeNotifications);
    }
  }, [notifications, safeNotifications]);
  
  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
  const scaleStyle = useMemo(() => ({
    fontSize: `${16 * scale}px`,
    '--heading-size': `${24 * scale}px`,
    '--text-size': `${18 * scale}px`,
    '--button-size': `${18 * scale}px`,
    '--input-size': `${18 * scale}px`,
    '--button-height': `${50 * scale}px`,
    '--spacing': `${20 * scale}px`,
    '--input-padding': `${16 * scale}px`,
    '--border-radius': `${8 * scale}px`,
  }), [scale]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const filteredNotifications = useMemo(() => {
    return safeNotifications.filter(notification => {
    const matchesSearch = 
        notification.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        notification.message?.toLowerCase().includes(searchTerm.toLowerCase());
    
      return matchesSearch;
    });
  }, [safeNotifications, searchTerm]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ –¥–∞—Ç–∞–º
  const groupedNotifications = useMemo(() => {
    return filteredNotifications.reduce((groups, notification) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º created_at –≤–º–µ—Å—Ç–æ timestamp
      if (!notification.created_at) {
        console.warn('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –¥–∞—Ç—ã:', notification);
        return groups;
      }
      
      const date = new Date(notification.created_at).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
    
    if (!groups[date]) {
      groups[date] = [];
    }
    groups[date].push(notification);
    return groups;
  }, {});
  }, [filteredNotifications]);

  return (
    <div className="max-w-4xl mx-auto" style={scaleStyle}>
      <div className="bg-white rounded-xl border border-gray-200 overflow-hidden">
        <div className="px-6 py-4 border-b border-gray-100">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <h2 className="font-semibold text-gray-900" style={{fontSize: 'var(--heading-size)'}}>
              –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            </h2>
            
            {/* Search */}
            <div className="relative max-w-sm">
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#1e2c4f] focus:border-transparent"
                placeholder="–ü–æ–∏—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π..."
                style={{
                  fontSize: 'var(--input-size)',
                  height: 'var(--button-height)',
                }}
              />
            </div>
          </div>
        </div>
        
        <div className="p-6">
          {filteredNotifications.length === 0 ? (
            <div className="text-center py-8">
              <div className="text-gray-400 text-4xl mb-4">üìã</div>
              <h3 className="font-medium text-gray-900 mb-2" style={{fontSize: 'var(--heading-size)'}}>
                {searchTerm ? '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : '–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞'}
              </h3>
              <p className="text-gray-600" style={{fontSize: 'var(--text-size)'}}>
                {searchTerm
                  ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞'
                  : '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å'
                }
              </p>
            </div>
          ) : (
            <div className="space-y-6">
              {Object.entries(groupedNotifications).map(([date, notifications]) => (
                <div key={date} className="space-y-4">
                  {/* Date Separator */}
                  <div className="flex items-center justify-center">
                    <div className="bg-gray-100 text-gray-600 font-medium px-6 py-3 rounded-full"
                         style={{fontSize: 'var(--text-size)'}}>
                      {date}
                    </div>
                  </div>
                  
                  {/* Notifications for this date */}
                  <div className="space-y-3">
                    {notifications.map((notification) => (
                      <div key={notification.notification_id} className="relative">
                        <NotificationCard
                          notification={notification}
                          onMarkAsRead={() => {}} // History mode - no marking as read
                          scale={scale}
                        />
                        {/* Recipients info */}
                        <div className="mt-2 ml-13 text-gray-500"
                             style={{
                               marginLeft: `${52 * scale}px`,
                               fontSize: 'var(--text-size)'
                             }}>
                          –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {notification.recipients?.length || 1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
});

NotificationHistory.displayName = 'NotificationHistory';

export default NotificationHistory; 